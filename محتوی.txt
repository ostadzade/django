=== apps/myaccounting/__init__.py ===
# Initialize accounting module

=== apps/myaccounting/admin.py ===
from django.contrib import admin
from .models import *

@admin.register(Account)
class AccountAdmin(admin.ModelAdmin):
    list_display = ('code', 'name', 'account_type', 'parent')
    list_filter = ('account_type', 'is_active')
    search_fields = ('code', 'name')

@admin.register(AccountMove)
class MoveAdmin(admin.ModelAdmin):
    list_display = ('id', 'journal', 'date', 'ref', 'state')
    list_filter = ('journal', 'state', 'date')

admin.site.register([Journal, AccountMoveLine, Partner, Company, Currency])

=== apps/myaccounting/apps.py ===
from django.apps import AppConfig

class MyaccountingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.myaccounting'
    verbose_name = 'سیستم حسابداری'

=== apps/myaccounting/models/base.py ===
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class BaseModel(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, 
                                  null=True, related_name='+')
    updated_by = models.ForeignKey(User, on_delete=models.SET_NULL, 
                                  null=True, related_name='+')
    company = models.ForeignKey('myaccounting.Company', on_delete=models.CASCADE)
    
    class Meta:
        abstract = True

=== apps/myaccounting/models/accounting.py ===
from django.db import models
from .base import BaseModel

class AccountType(models.TextChoices):
    ASSET = 'ASSET', 'دارایی'
    LIABILITY = 'LIABILITY', 'بدهی'
    EQUITY = 'EQUITY', 'سرمایه'
    INCOME = 'INCOME', 'درآمد'
    EXPENSE = 'EXPENSE', 'هزینه'

class Account(BaseModel):
    code = models.CharField(max_length=20)
    name = models.CharField(max_length=100)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, 
                             null=True, blank=True)
    account_type = models.CharField(max_length=10, 
                                  choices=AccountType.choices)
    currency = models.ForeignKey('Currency', on_delete=models.PROTECT)
    is_active = models.BooleanField(default=True)
    reconcile = models.BooleanField(default=False)
    
    class Meta:
        unique_together = ('company', 'code')
        ordering = ['code']
    
    def __str__(self):
        return f"{self.code} - {self.name}"

class Journal(BaseModel):
    JOURNAL_TYPES = [
        ('sale', 'فروش'),
        ('purchase', 'خرید'),
        ('cash', 'نقدی'),
        ('bank', 'بانکی'),
        ('general', 'عمومی')
    ]
    
    name = models.CharField(max_length=100)
    code = models.CharField(max_length=5)
    type = models.CharField(max_length=10, choices=JOURNAL_TYPES)
    default_account = models.ForeignKey(Account, on_delete=models.PROTECT)
    
    def __str__(self):
        return self.name

class AccountMove(BaseModel):
    journal = models.ForeignKey(Journal, on_delete=models.PROTECT)
    date = models.DateField()
    ref = models.CharField(max_length=100, blank=True)
    state = models.CharField(max_length=10, choices=[
        ('draft', 'پیش‌نویس'),
        ('posted', 'ثبت شده'),
        ('canceled', 'لغو شده')
    ], default='draft')
    
    class Meta:
        ordering = ['-date', '-id']
    
    def __str__(self):
        return f"{self.journal.code}/{self.id}"

class AccountMoveLine(models.Model):
    move = models.ForeignKey(AccountMove, on_delete=models.CASCADE,
                           related_name='lines')
    account = models.ForeignKey(Account, on_delete=models.PROTECT)
    partner = models.ForeignKey('Partner', on_delete=models.SET_NULL,
                              null=True, blank=True)
    debit = models.DecimalField(max_digits=20, decimal_places=2, default=0)
    credit = models.DecimalField(max_digits=20, decimal_places=2, default=0)
    currency = models.ForeignKey('Currency', on_delete=models.PROTECT)
    amount_currency = models.DecimalField(max_digits=20, decimal_places=2, default=0)
    reconciled = models.BooleanField(default=False)
    
    def __str__(self):
        return f"{self.move} - {self.account}"

=== apps/myaccounting/models/company.py ===
from django.db import models
from .base import BaseModel

class Currency(models.Model):
    code = models.CharField(max_length=3, unique=True)
    name = models.CharField(max_length=50)
    symbol = models.CharField(max_length=5)
    rate = models.DecimalField(max_digits=20, decimal_places=6, default=1.0)
    
    def __str__(self):
        return f"{self.code} - {self.name}"

class Company(models.Model):
    name = models.CharField(max_length=100)
    fiscalyear_start = models.DateField()
    fiscalyear_end = models.DateField()
    currency = models.ForeignKey(Currency, on_delete=models.PROTECT)
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        return self.name

=== apps/myaccounting/models/partner.py ===
from django.db import models
from .base import BaseModel

class Partner(BaseModel):
    PARTNER_TYPES = [
        ('customer', 'مشتری'),
        ('supplier', 'تامین کننده'),
        ('both', 'هر دو')
    ]
    
    name = models.CharField(max_length=100)
    partner_type = models.CharField(max_length=10, choices=PARTNER_TYPES)
    tax_id = models.CharField(max_length=20, blank=True)
    phone = models.CharField(max_length=20, blank=True)
    email = models.EmailField(blank=True)
    address = models.TextField(blank=True)
    is_active = models.BooleanField(default=True)
    
    class Meta:
        ordering = ['name']
    
    def __str__(self):
        return f"{self.name} ({self.get_partner_type_display()})"

=== apps/myaccounting/services/accounting.py ===
from decimal import Decimal
from django.db import transaction
from ..models.accounting import AccountMove, AccountMoveLine

class AccountingService:
    @staticmethod
    @transaction.atomic
    def create_move(journal, date, lines, ref='', created_by=None):
        move = AccountMove.objects.create(
            journal=journal,
            date=date,
            ref=ref,
            state='draft',
            created_by=created_by,
            company=journal.company
        )
        
        total_debit = Decimal('0')
        total_credit = Decimal('0')
        
        for line in lines:
            line['move'] = move
            AccountMoveLine.objects.create(**line)
            total_debit += line.get('debit', Decimal('0'))
            total_credit += line.get('credit', Decimal('0'))
        
        if total_debit != total_credit:
            raise ValueError("جمع دفتر و بستانکار باید برابر باشد")
        
        return move

    @staticmethod
    @transaction.atomic
    def post_move(move):
        if move.state != 'draft':
            raise ValueError("فقط اسناد پیش‌نویس قابل ثبت هستند")
        
        move.state = 'posted'
        move.save()
        return move

=== apps/myaccounting/urls.py ===
from django.urls import path
from .views import accounting

app_name = 'accounting'

urlpatterns = [
    path('accounts/', accounting.AccountListView.as_view(), name='account-list'),
    path('moves/new/', accounting.MoveCreateView.as_view(), name='move-create'),
    path('moves/<int:pk>/', accounting.MoveDetailView.as_view(), name='move-detail'),
]

=== apps/myaccounting/views/accounting.py ===
from django.views.generic import ListView, CreateView, DetailView
from django.contrib.auth.mixins import LoginRequiredMixin
from ..models import Account, AccountMove

class AccountListView(LoginRequiredMixin, ListView):
    model = Account
    template_name = 'accounting/accounts/list.html'
    
    def get_queryset(self):
        return Account.objects.filter(company=self.request.user.profile.company)

class MoveCreateView(LoginRequiredMixin, CreateView):
    model = AccountMove
    fields = ['journal', 'date', 'ref']
    template_name = 'accounting/moves/form.html'
    
    def form_valid(self, form):
        form.instance.created_by = self.request.user
        form.instance.company = self.request.user.profile.company
        return super().form_valid(form)

class MoveDetailView(LoginRequiredMixin, DetailView):
    model = AccountMove
    template_name = 'accounting/moves/detail.html'

=== templates/accounting/base.html ===
{% extends "base.html" %}

{% block content %}
<div class="accounting-layout">
    {% include "accounting/partials/_sidebar.html" %}
    <div class="accounting-main">
        {% include "accounting/partials/_navbar.html" %}
        <div class="accounting-content">
            {% block accounting_content %}{% endblock %}
        </div>
    </div>
</div>
{% endblock %}

=== templates/accounting/partials/_sidebar.html ===
<nav class="accounting-sidebar">
    <div class="sidebar-header">
        <h4>منوی حسابداری</h4>
    </div>
    <ul class="sidebar-menu">
        <li><a href="{% url 'accounting:account-list' %}"><i class="fas fa-book"></i> حساب‌ها</a></li>
        <li><a href="{% url 'accounting:move-create' %}"><i class="fas fa-file-invoice"></i> اسناد</a></li>
    </ul>
</nav>

=== apps/myaccounting/static/css/accounting.css ===
.accounting-layout {
    display: flex;
    min-height: 100vh;
}

.accounting-sidebar {
    width: 250px;
    background: #2c3e50;
    color: white;
    padding: 20px 0;
}

.accounting-main {
    flex: 1;
    padding: 20px;
}

.accounting-content {
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}